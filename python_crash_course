1. 使用title方法修改字符串的大小写：
name='add lovelace'
print(name.title()) #title()以首字母大写的方式显示每个单词。将输出'Add Lovelace'
print(name.upper()) #全部变成大写
print(name.lower()) #全部变成小写

2. 使用rstrip()方法删除空白符
  message='python '
  message.rstrip='python'#只是暂时的删除；
  message=message.rstrip #永久删除，删除后重新赋值；
  strip（）方法删除所有空格，rstrip（）只删除右面的空格，lstrip（）删除左边的空格
  
3. sort()排序：
  list.sort(): 正向排序
  list.sort(reverse=True):反向排序
  sorted(list):不影响原来的列表；
 
4. 可以用集合剔除重复项,set()： 
   for language in set(favourite_language.values()):
      print(language.title())

5. 在程序可能出错的地方添加excwpt 模块：
  def count_words(filename):
    try:
      with open(filename) as f_obj:
        contents=f_obj.read(): 
      except FileNotFoundError:
        msg = "Sorry, did not find" + filename
        print(msg)
      else: 
        words=contents.split()
        num_words=len(words)
        print("the" + filename + "has" + str(num_words) + "words")
   filenames = ['alice.txt', 'xxx.txt'] #可以添加多个文件
   for filename in filenames: 
      count_words(filename)

6. 存储数据json:
  json.dump() 存储；json.load()提取；
  import json
  def get_stored_username():
 
  def get_new_username():
    username = input("what is your name?")
    filename = 'username.json'
    with open(filename,'w') as f_obj:
      json.dump(username,f_obj)
    return username
  def geet_user():
    username = get_stored_username()
    if username: 
      print("welcome back" + username)
    else: 
      username = get_new_username()
      print("we will remreber your name when you back," + username)
  greet_user()
  
7. 制作一个游戏：
  1. 游戏的基本主结构：
    import sys #使用sys模块来退出游戏
    import pygame 
    from settings import Settings
    from ship import Ship
    import game_functions as gf
    def run_game(): #初始化游戏并创建一个屏幕对象
    pygame.init() #初始化背景设置
    ai_settings = Settings()
    screen = pygame.display.set_mode((ai_settings.screen_width,ai_settings.screen_height))
    pygame.display.set_caption("Alien Invasion)
    ship = Ship(ai_settings,screen)
    pygame.init() #初始化背景设置
    bg_color = (230,230,230)

    while True: #监视键盘和鼠标事件
      gf.check_events(ship) #插入实际参数
      ship.update()
      gf.update_screen(ai_settings,screen,ship)
      for event in pygame.event.get():
        if event.type == pygame.QUIT:
          sys.exit()
      screen.fill(bg_color)
      screen.fill(ai_settings.bg_color)
      ship.blitme()
      pygame.display.flip() #让最近绘制的屏幕可见
    run_game()
  2. 创建一个settings类的模块：settings.py
     class Settings():
        def_int_(self):
        self.screen_width = 1200
        self.screen_height = 800
        self.bg_color = (230,230,230)
        self.ship_speed_factor = 1.5
  3. 创建ship类：ship.py 负责飞船的大部分行为
     import pygame
     class Ship():
        def _int_(self,ai_settings,screen): #初始化飞船并设置其初始位置
        self.screen = screen
        self.ai_settings = ai_settings
        self.image = pygame.image.load('ship.bmp') #导入飞船图像并获取其外接矩形
        self.rect = self.image.get_rect() #处理成矩形以方便坐标处理。
        self.rect = self.image.get_rect()
        self.rect.centerx = self.screen_rect.centerx #将每艘新飞船放在屏幕底部中央
        self.rect.bottom = self.screen_rect.bottom
        self.center = floart(self.rect.centerx)
        self.moving_right = FALSE  #按下按键持续移动
        self.moving_left = FALSE
     def update(self):
        if self.moving_right and self.rect.right < self.screen_rect.right:
          self.center += self.ai_settings.ship_speed_factor
        if self.moving_left and self.rect.left > 0:
          self.center -= self.ai_settings.ship_speed_factor
        self.rect.centerx = self.center
     def blitme(self): #在指定位置绘制飞船
        delf.screen.blit(self.image,self.rect)
  4.添加飞船动作函数： game_functions.py
     import sys
     import pygame
     def check_keydown_events(event,ship): #响应按键
          if event.key == pygame.K_RIGHT:
            ship.moving_right = True
          elif event.key == pygame.K_LEFT: 
              ship.moving_left = True
      def check_keyup_events(event, ship):
            if event.key == pygame.K_RIGHT:
              ship.moving_right = False
          elif event.key == pygame.K_LEFT:
              ship.moving_left = False
       def check_event(ship):#响应按键和鼠标事件
          for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                check_keydown_events(event,ship)
            elif event.type == pygame.KEYUP:
                check_keyup_events(event,ship)
            if event.key == pygame.K_LEFT:
              ship.moving_left = False
              ship.rect.centerx += 1
        def update_screen(ai_settings,screen,ship):
        screen.fill(ai_settings.bg_color)
        screen.blitme() #根据rect指定的位置将图像绘制在屏幕上
        pygame.display.flip()
        for event in pygame.event.get():
          if event.type == pygame.QUIT:
            sys.exit()
     
     
 8. matplotlib>
    安装： pip3 install --user matplotlib
      xlabel, ylabel, fontsize, axis（设置坐标轴的范围）
      plt.plot(input_values,squares,linewidth=5) #同时提供输入值和输出值，并设置线宽。
    Scatter() #绘制散点图
        
9. Pygal 可视化仓库： 
      chart = pygal.Bar(my_config,style = my_style) #创建bar实例

10. Django: 
    1). 安装虚拟环境： 新建目录： learning-blog$ python -m venv 11_venv 或者直接安装虚拟环境： pip3 install --user virtualenv
    2). 激活虚拟环境： learning-blog$ source 11_env/bin/activate
    3). (11_env)learning-blog$ pip3 install Django == 1.11  #Django 仅在虚拟环境激活状态下可用
    4). (11_env)learning-blog$ django-admin.py startproject learning_log . #创建项目
    5). 创建数据库：python manage.py migrate #回创建SQLite数据库文件
    6). startapp appname 是让Django简历创建应用程序所需的基础设施
    7). 修改项目的数据时的三个步骤：修改model.py; 调用makemigrations； 让Django迁移项目。 
  
